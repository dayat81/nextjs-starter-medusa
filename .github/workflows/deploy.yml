name: Deploy to Google Cloud

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  GAR_LOCATION: us-central1-docker.pkg.dev
  SERVICE: nextjs-storefront
  
jobs:
  # Lint and test job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linter
        run: yarn lint

      - name: Run type check
        run: yarn type-check || echo "Type check failed but continuing..."

      # Add more tests here as needed
      # - name: Run tests
      #   run: yarn test

  # Build and deploy job
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    # Set environment based on branch
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as credential helper
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0
          terraform_wrapper: false

      - name: Create Terraform backend bucket if not exists
        run: |
          gsutil ls gs://${{ env.PROJECT_ID }}-terraform-state || \
          gsutil mb -p ${{ env.PROJECT_ID }} -l ${{ env.REGION }} gs://${{ env.PROJECT_ID }}-terraform-state

      - name: Build Docker image
        run: |
          docker build -f infra/docker/Dockerfile \
            -t ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/images/${{ env.SERVICE }}:${{ github.sha }} \
            -t ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/images/${{ env.SERVICE }}:latest \
            .

      - name: Push Docker image
        run: |
          docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/images/${{ env.SERVICE }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/images/${{ env.SERVICE }}:latest

      - name: Terraform Init
        working-directory: infra/terraform
        run: |
          # Update backend configuration
          sed -i 's/YOUR_PROJECT_ID/${{ env.PROJECT_ID }}/g' providers.tf
          terraform init

      - name: Select Terraform Workspace
        working-directory: infra/terraform
        run: |
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}

      - name: Terraform Plan
        working-directory: infra/terraform
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.REGION }}
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_medusa_backend_url: ${{ secrets.MEDUSA_BACKEND_URL }}
          TF_VAR_next_public_base_url: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
          TF_VAR_medusa_publishable_key: ${{ secrets.MEDUSA_PUBLISHABLE_KEY }}
          TF_VAR_stripe_public_key: ${{ secrets.STRIPE_PUBLIC_KEY }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: |
          terraform plan \
            -var-file="environments/${{ env.ENVIRONMENT }}/terraform.tfvars" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: infra/terraform
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.REGION }}
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_medusa_backend_url: ${{ secrets.MEDUSA_BACKEND_URL }}
          TF_VAR_next_public_base_url: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
          TF_VAR_medusa_publishable_key: ${{ secrets.MEDUSA_PUBLISHABLE_KEY }}
          TF_VAR_stripe_public_key: ${{ secrets.STRIPE_PUBLIC_KEY }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: terraform apply tfplan

      - name: Get deployment URL
        working-directory: infra/terraform
        id: get-url
        run: |
          URL=$(terraform output -raw cloud_run_url)
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Health Check
        run: |
          echo "Waiting for service to be ready..."
          sleep 30
          
          # Simple health check
          if curl -f "${{ steps.get-url.outputs.url }}/api/health" --max-time 30; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ö†Ô∏è Health check failed, but deployment may still be successful"
            echo "Check the Cloud Run logs for more details"
          fi

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Deployment Preview**
              
              Environment: ${{ env.ENVIRONMENT }}
              URL: ${{ steps.get-url.outputs.url }}
              
              The application has been deployed and is ready for testing!`
            })

  # Security scanning
  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'